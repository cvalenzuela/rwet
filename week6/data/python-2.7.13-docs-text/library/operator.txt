
"operator" --- Standard operators as functions
**********************************************

The "operator" module exports a set of efficient functions
corresponding to the intrinsic operators of Python.  For example,
"operator.add(x, y)" is equivalent to the expression "x+y".  The
function names are those used for special class methods; variants
without leading and trailing "__" are also provided for convenience.

The functions fall into categories that perform object comparisons,
logical operations, mathematical operations, sequence operations, and
abstract type tests.

The object comparison functions are useful for all objects, and are
named after the rich comparison operators they support:

operator.lt(a, b)
operator.le(a, b)
operator.eq(a, b)
operator.ne(a, b)
operator.ge(a, b)
operator.gt(a, b)
operator.__lt__(a, b)
operator.__le__(a, b)
operator.__eq__(a, b)
operator.__ne__(a, b)
operator.__ge__(a, b)
operator.__gt__(a, b)

   Perform "rich comparisons" between *a* and *b*. Specifically,
   "lt(a, b)" is equivalent to "a < b", "le(a, b)" is equivalent to "a
   <= b", "eq(a, b)" is equivalent to "a == b", "ne(a, b)" is
   equivalent to "a != b", "gt(a, b)" is equivalent to "a > b" and
   "ge(a, b)" is equivalent to "a >= b".  Note that unlike the built-
   in "cmp()", these functions can return any value, which may or may
   not be interpretable as a Boolean value. See Comparisons for more
   information about rich comparisons.

   New in version 2.2.

The logical operations are also generally applicable to all objects,
and support truth tests, identity tests, and boolean operations:

operator.not_(obj)
operator.__not__(obj)

   Return the outcome of "not" *obj*.  (Note that there is no
   "__not__()" method for object instances; only the interpreter core
   defines this operation.  The result is affected by the
   "__nonzero__()" and "__len__()" methods.)

operator.truth(obj)

   Return "True" if *obj* is true, and "False" otherwise.  This is
   equivalent to using the "bool" constructor.

operator.is_(a, b)

   Return "a is b".  Tests object identity.

   New in version 2.3.

operator.is_not(a, b)

   Return "a is not b".  Tests object identity.

   New in version 2.3.

The mathematical and bitwise operations are the most numerous:

operator.abs(obj)
operator.__abs__(obj)

   Return the absolute value of *obj*.

operator.add(a, b)
operator.__add__(a, b)

   Return "a + b", for *a* and *b* numbers.

operator.and_(a, b)
operator.__and__(a, b)

   Return the bitwise and of *a* and *b*.

operator.div(a, b)
operator.__div__(a, b)

   Return "a / b" when "__future__.division" is not in effect.  This
   is also known as "classic" division.

operator.floordiv(a, b)
operator.__floordiv__(a, b)

   Return "a // b".

   New in version 2.2.

operator.index(a)
operator.__index__(a)

   Return *a* converted to an integer.  Equivalent to "a.__index__()".

   New in version 2.5.

operator.inv(obj)
operator.invert(obj)
operator.__inv__(obj)
operator.__invert__(obj)

   Return the bitwise inverse of the number *obj*.  This is equivalent
   to "~obj".

   New in version 2.0: The names "invert()" and "__invert__()".

operator.lshift(a, b)
operator.__lshift__(a, b)

   Return *a* shifted left by *b*.

operator.mod(a, b)
operator.__mod__(a, b)

   Return "a % b".

operator.mul(a, b)
operator.__mul__(a, b)

   Return "a * b", for *a* and *b* numbers.

operator.neg(obj)
operator.__neg__(obj)

   Return *obj* negated ("-obj").

operator.or_(a, b)
operator.__or__(a, b)

   Return the bitwise or of *a* and *b*.

operator.pos(obj)
operator.__pos__(obj)

   Return *obj* positive ("+obj").

operator.pow(a, b)
operator.__pow__(a, b)

   Return "a ** b", for *a* and *b* numbers.

   New in version 2.3.

operator.rshift(a, b)
operator.__rshift__(a, b)

   Return *a* shifted right by *b*.

operator.sub(a, b)
operator.__sub__(a, b)

   Return "a - b".

operator.truediv(a, b)
operator.__truediv__(a, b)

   Return "a / b" when "__future__.division" is in effect.  This is
   also known as "true" division.

   New in version 2.2.

operator.xor(a, b)
operator.__xor__(a, b)

   Return the bitwise exclusive or of *a* and *b*.

Operations which work with sequences (some of them with mappings too)
include:

operator.concat(a, b)
operator.__concat__(a, b)

   Return "a + b" for *a* and *b* sequences.

operator.contains(a, b)
operator.__contains__(a, b)

   Return the outcome of the test "b in a". Note the reversed
   operands.

   New in version 2.0: The name "__contains__()".

operator.countOf(a, b)

   Return the number of occurrences of *b* in *a*.

operator.delitem(a, b)
operator.__delitem__(a, b)

   Remove the value of *a* at index *b*.

operator.delslice(a, b, c)
operator.__delslice__(a, b, c)

   Delete the slice of *a* from index *b* to index *c-1*.

   Deprecated since version 2.6: This function is removed in Python
   3.x.  Use "delitem()" with a slice index.

operator.getitem(a, b)
operator.__getitem__(a, b)

   Return the value of *a* at index *b*.

operator.getslice(a, b, c)
operator.__getslice__(a, b, c)

   Return the slice of *a* from index *b* to index *c-1*.

   Deprecated since version 2.6: This function is removed in Python
   3.x.  Use "getitem()" with a slice index.

operator.indexOf(a, b)

   Return the index of the first of occurrence of *b* in *a*.

operator.repeat(a, b)
operator.__repeat__(a, b)

   Deprecated since version 2.7: Use "__mul__()" instead.

   Return "a * b" where *a* is a sequence and *b* is an integer.

operator.sequenceIncludes(...)

   Deprecated since version 2.0: Use "contains()" instead.

   Alias for "contains()".

operator.setitem(a, b, c)
operator.__setitem__(a, b, c)

   Set the value of *a* at index *b* to *c*.

operator.setslice(a, b, c, v)
operator.__setslice__(a, b, c, v)

   Set the slice of *a* from index *b* to index *c-1* to the sequence
   *v*.

   Deprecated since version 2.6: This function is removed in Python
   3.x.  Use "setitem()" with a slice index.

Example use of operator functions:

   >>> # Elementwise multiplication
   >>> map(mul, [0, 1, 2, 3], [10, 20, 30, 40])
   [0, 20, 60, 120]

   >>> # Dot product
   >>> sum(map(mul, [0, 1, 2, 3], [10, 20, 30, 40]))
   200

Many operations have an "in-place" version.  The following functions
provide a more primitive access to in-place operators than the usual
syntax does; for example, the *statement* "x += y" is equivalent to "x
= operator.iadd(x, y)".  Another way to put it is to say that "z =
operator.iadd(x, y)" is equivalent to the compound statement "z = x; z
+= y".

operator.iadd(a, b)
operator.__iadd__(a, b)

   "a = iadd(a, b)" is equivalent to "a += b".

   New in version 2.5.

operator.iand(a, b)
operator.__iand__(a, b)

   "a = iand(a, b)" is equivalent to "a &= b".

   New in version 2.5.

operator.iconcat(a, b)
operator.__iconcat__(a, b)

   "a = iconcat(a, b)" is equivalent to "a += b" for *a* and *b*
   sequences.

   New in version 2.5.

operator.idiv(a, b)
operator.__idiv__(a, b)

   "a = idiv(a, b)" is equivalent to "a /= b" when
   "__future__.division" is not in effect.

   New in version 2.5.

operator.ifloordiv(a, b)
operator.__ifloordiv__(a, b)

   "a = ifloordiv(a, b)" is equivalent to "a //= b".

   New in version 2.5.

operator.ilshift(a, b)
operator.__ilshift__(a, b)

   "a = ilshift(a, b)" is equivalent to "a <<= b".

   New in version 2.5.

operator.imod(a, b)
operator.__imod__(a, b)

   "a = imod(a, b)" is equivalent to "a %= b".

   New in version 2.5.

operator.imul(a, b)
operator.__imul__(a, b)

   "a = imul(a, b)" is equivalent to "a *= b".

   New in version 2.5.

operator.ior(a, b)
operator.__ior__(a, b)

   "a = ior(a, b)" is equivalent to "a |= b".

   New in version 2.5.

operator.ipow(a, b)
operator.__ipow__(a, b)

   "a = ipow(a, b)" is equivalent to "a **= b".

   New in version 2.5.

operator.irepeat(a, b)
operator.__irepeat__(a, b)

   Deprecated since version 2.7: Use "__imul__()" instead.

   "a = irepeat(a, b)" is equivalent to "a *= b" where *a* is a
   sequence and *b* is an integer.

   New in version 2.5.

operator.irshift(a, b)
operator.__irshift__(a, b)

   "a = irshift(a, b)" is equivalent to "a >>= b".

   New in version 2.5.

operator.isub(a, b)
operator.__isub__(a, b)

   "a = isub(a, b)" is equivalent to "a -= b".

   New in version 2.5.

operator.itruediv(a, b)
operator.__itruediv__(a, b)

   "a = itruediv(a, b)" is equivalent to "a /= b" when
   "__future__.division" is in effect.

   New in version 2.5.

operator.ixor(a, b)
operator.__ixor__(a, b)

   "a = ixor(a, b)" is equivalent to "a ^= b".

   New in version 2.5.

The "operator" module also defines a few predicates to test the type
of objects; however, these are not all reliable.  It is preferable to
test abstract base classes instead (see "collections" and "numbers"
for details).

operator.isCallable(obj)

   Deprecated since version 2.0: Use "isinstance(x,
   collections.Callable)" instead.

   Returns true if the object *obj* can be called like a function,
   otherwise it returns false.  True is returned for functions, bound
   and unbound methods, class objects, and instance objects which
   support the "__call__()" method.

operator.isMappingType(obj)

   Deprecated since version 2.7: Use "isinstance(x,
   collections.Mapping)" instead.

   Returns true if the object *obj* supports the mapping interface.
   This is true for dictionaries and all instance objects defining
   "__getitem__()".

operator.isNumberType(obj)

   Deprecated since version 2.7: Use "isinstance(x, numbers.Number)"
   instead.

   Returns true if the object *obj* represents a number.  This is true
   for all numeric types implemented in C.

operator.isSequenceType(obj)

   Deprecated since version 2.7: Use "isinstance(x,
   collections.Sequence)" instead.

   Returns true if the object *obj* supports the sequence protocol.
   This returns true for all objects which define sequence methods in
   C, and for all instance objects defining "__getitem__()".

The "operator" module also defines tools for generalized attribute and
item lookups.  These are useful for making fast field extractors as
arguments for "map()", "sorted()", "itertools.groupby()", or other
functions that expect a function argument.

operator.attrgetter(attr)
operator.attrgetter(*attrs)

   Return a callable object that fetches *attr* from its operand. If
   more than one attribute is requested, returns a tuple of
   attributes. The attribute names can also contain dots. For example:

   * After "f = attrgetter('name')", the call "f(b)" returns
     "b.name".

   * After "f = attrgetter('name', 'date')", the call "f(b)" returns
     "(b.name, b.date)".

   * After "f = attrgetter('name.first', 'name.last')", the call
     "f(b)" returns "(b.name.first, b.name.last)".

   Equivalent to:

      def attrgetter(*items):
          if len(items) == 1:
              attr = items[0]
              def g(obj):
                  return resolve_attr(obj, attr)
          else:
              def g(obj):
                  return tuple(resolve_attr(obj, attr) for attr in items)
          return g

      def resolve_attr(obj, attr):
          for name in attr.split("."):
              obj = getattr(obj, name)
          return obj

   New in version 2.4.

   Changed in version 2.5: Added support for multiple attributes.

   Changed in version 2.6: Added support for dotted attributes.

operator.itemgetter(item)
operator.itemgetter(*items)

   Return a callable object that fetches *item* from its operand using
   the operand's "__getitem__()" method.  If multiple items are
   specified, returns a tuple of lookup values.  For example:

   * After "f = itemgetter(2)", the call "f(r)" returns "r[2]".

   * After "g = itemgetter(2, 5, 3)", the call "g(r)" returns
     "(r[2], r[5], r[3])".

   Equivalent to:

      def itemgetter(*items):
          if len(items) == 1:
              item = items[0]
              def g(obj):
                  return obj[item]
          else:
              def g(obj):
                  return tuple(obj[item] for item in items)
          return g

   The items can be any type accepted by the operand's "__getitem__()"
   method.  Dictionaries accept any hashable value.  Lists, tuples,
   and strings accept an index or a slice:

   >>> itemgetter(1)('ABCDEFG')
   'B'
   >>> itemgetter(1,3,5)('ABCDEFG')
   ('B', 'D', 'F')
   >>> itemgetter(slice(2,None))('ABCDEFG')
   'CDEFG'

   New in version 2.4.

   Changed in version 2.5: Added support for multiple item extraction.

   Example of using "itemgetter()" to retrieve specific fields from a
   tuple record:

   >>> inventory = [('apple', 3), ('banana', 2), ('pear', 5), ('orange', 1)]
   >>> getcount = itemgetter(1)
   >>> map(getcount, inventory)
   [3, 2, 5, 1]
   >>> sorted(inventory, key=getcount)
   [('orange', 1), ('banana', 2), ('apple', 3), ('pear', 5)]

operator.methodcaller(name[, args...])

   Return a callable object that calls the method *name* on its
   operand.  If additional arguments and/or keyword arguments are
   given, they will be given to the method as well.  For example:

   * After "f = methodcaller('name')", the call "f(b)" returns
     "b.name()".

   * After "f = methodcaller('name', 'foo', bar=1)", the call "f(b)"
     returns "b.name('foo', bar=1)".

   Equivalent to:

      def methodcaller(name, *args, **kwargs):
          def caller(obj):
              return getattr(obj, name)(*args, **kwargs)
          return caller

   New in version 2.6.


Mapping Operators to Functions
==============================

This table shows how abstract operations correspond to operator
symbols in the Python syntax and the functions in the "operator"
module.

+-------------------------+---------------------------+-----------------------------------------+
| Operation               | Syntax                    | Function                                |
+=========================+===========================+=========================================+
| Addition                | "a + b"                   | "add(a, b)"                             |
+-------------------------+---------------------------+-----------------------------------------+
| Concatenation           | "seq1 + seq2"             | "concat(seq1, seq2)"                    |
+-------------------------+---------------------------+-----------------------------------------+
| Containment Test        | "obj in seq"              | "contains(seq, obj)"                    |
+-------------------------+---------------------------+-----------------------------------------+
| Division                | "a / b"                   | "div(a, b)" (without                    |
|                         |                           | "__future__.division")                  |
+-------------------------+---------------------------+-----------------------------------------+
| Division                | "a / b"                   | "truediv(a, b)" (with                   |
|                         |                           | "__future__.division")                  |
+-------------------------+---------------------------+-----------------------------------------+
| Division                | "a // b"                  | "floordiv(a, b)"                        |
+-------------------------+---------------------------+-----------------------------------------+
| Bitwise And             | "a & b"                   | "and_(a, b)"                            |
+-------------------------+---------------------------+-----------------------------------------+
| Bitwise Exclusive Or    | "a ^ b"                   | "xor(a, b)"                             |
+-------------------------+---------------------------+-----------------------------------------+
| Bitwise Inversion       | "~ a"                     | "invert(a)"                             |
+-------------------------+---------------------------+-----------------------------------------+
| Bitwise Or              | "a | b"                   | "or_(a, b)"                             |
+-------------------------+---------------------------+-----------------------------------------+
| Exponentiation          | "a ** b"                  | "pow(a, b)"                             |
+-------------------------+---------------------------+-----------------------------------------+
| Identity                | "a is b"                  | "is_(a, b)"                             |
+-------------------------+---------------------------+-----------------------------------------+
| Identity                | "a is not b"              | "is_not(a, b)"                          |
+-------------------------+---------------------------+-----------------------------------------+
| Indexed Assignment      | "obj[k] = v"              | "setitem(obj, k, v)"                    |
+-------------------------+---------------------------+-----------------------------------------+
| Indexed Deletion        | "del obj[k]"              | "delitem(obj, k)"                       |
+-------------------------+---------------------------+-----------------------------------------+
| Indexing                | "obj[k]"                  | "getitem(obj, k)"                       |
+-------------------------+---------------------------+-----------------------------------------+
| Left Shift              | "a << b"                  | "lshift(a, b)"                          |
+-------------------------+---------------------------+-----------------------------------------+
| Modulo                  | "a % b"                   | "mod(a, b)"                             |
+-------------------------+---------------------------+-----------------------------------------+
| Multiplication          | "a * b"                   | "mul(a, b)"                             |
+-------------------------+---------------------------+-----------------------------------------+
| Negation (Arithmetic)   | "- a"                     | "neg(a)"                                |
+-------------------------+---------------------------+-----------------------------------------+
| Negation (Logical)      | "not a"                   | "not_(a)"                               |
+-------------------------+---------------------------+-----------------------------------------+
| Positive                | "+ a"                     | "pos(a)"                                |
+-------------------------+---------------------------+-----------------------------------------+
| Right Shift             | "a >> b"                  | "rshift(a, b)"                          |
+-------------------------+---------------------------+-----------------------------------------+
| Sequence Repetition     | "seq * i"                 | "repeat(seq, i)"                        |
+-------------------------+---------------------------+-----------------------------------------+
| Slice Assignment        | "seq[i:j] = values"       | "setitem(seq, slice(i, j), values)"     |
+-------------------------+---------------------------+-----------------------------------------+
| Slice Deletion          | "del seq[i:j]"            | "delitem(seq, slice(i, j))"             |
+-------------------------+---------------------------+-----------------------------------------+
| Slicing                 | "seq[i:j]"                | "getitem(seq, slice(i, j))"             |
+-------------------------+---------------------------+-----------------------------------------+
| String Formatting       | "s % obj"                 | "mod(s, obj)"                           |
+-------------------------+---------------------------+-----------------------------------------+
| Subtraction             | "a - b"                   | "sub(a, b)"                             |
+-------------------------+---------------------------+-----------------------------------------+
| Truth Test              | "obj"                     | "truth(obj)"                            |
+-------------------------+---------------------------+-----------------------------------------+
| Ordering                | "a < b"                   | "lt(a, b)"                              |
+-------------------------+---------------------------+-----------------------------------------+
| Ordering                | "a <= b"                  | "le(a, b)"                              |
+-------------------------+---------------------------+-----------------------------------------+
| Equality                | "a == b"                  | "eq(a, b)"                              |
+-------------------------+---------------------------+-----------------------------------------+
| Difference              | "a != b"                  | "ne(a, b)"                              |
+-------------------------+---------------------------+-----------------------------------------+
| Ordering                | "a >= b"                  | "ge(a, b)"                              |
+-------------------------+---------------------------+-----------------------------------------+
| Ordering                | "a > b"                   | "gt(a, b)"                              |
+-------------------------+---------------------------+-----------------------------------------+
