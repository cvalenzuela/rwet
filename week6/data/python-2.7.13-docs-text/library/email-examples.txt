
"email": Examples
*****************

Here are a few examples of how to use the "email" package to read,
write, and send simple email messages, as well as more complex MIME
messages.

First, let's see how to create and send a simple text message:

   # Import smtplib for the actual sending function
   import smtplib

   # Import the email modules we'll need
   from email.mime.text import MIMEText

   # Open a plain text file for reading.  For this example, assume that
   # the text file contains only ASCII characters.
   fp = open(textfile, 'rb')
   # Create a text/plain message
   msg = MIMEText(fp.read())
   fp.close()

   # me == the sender's email address
   # you == the recipient's email address
   msg['Subject'] = 'The contents of %s' % textfile
   msg['From'] = me
   msg['To'] = you

   # Send the message via our own SMTP server, but don't include the
   # envelope header.
   s = smtplib.SMTP('localhost')
   s.sendmail(me, [you], msg.as_string())
   s.quit()

And parsing RFC822 headers can easily be done by the parse(filename)
or parsestr(message_as_string) methods of the Parser() class:

   # Import the email modules we'll need
   from email.parser import Parser

   #  If the e-mail headers are in a file, uncomment this line:
   #headers = Parser().parse(open(messagefile, 'r'))

   #  Or for parsing headers in a string, use:
   headers = Parser().parsestr('From: <user@example.com>\n'
           'To: <someone_else@example.com>\n'
           'Subject: Test message\n'
           '\n'
           'Body would go here\n')

   #  Now the header items can be accessed as a dictionary:
   print 'To: %s' % headers['to']
   print 'From: %s' % headers['from']
   print 'Subject: %s' % headers['subject']

Here's an example of how to send a MIME message containing a bunch of
family pictures that may be residing in a directory:

   # Import smtplib for the actual sending function
   import smtplib

   # Here are the email package modules we'll need
   from email.mime.image import MIMEImage
   from email.mime.multipart import MIMEMultipart

   COMMASPACE = ', '

   # Create the container (outer) email message.
   msg = MIMEMultipart()
   msg['Subject'] = 'Our family reunion'
   # me == the sender's email address
   # family = the list of all recipients' email addresses
   msg['From'] = me
   msg['To'] = COMMASPACE.join(family)
   msg.preamble = 'Our family reunion'

   # Assume we know that the image files are all in PNG format
   for file in pngfiles:
       # Open the files in binary mode.  Let the MIMEImage class automatically
       # guess the specific image type.
       fp = open(file, 'rb')
       img = MIMEImage(fp.read())
       fp.close()
       msg.attach(img)

   # Send the email via our own SMTP server.
   s = smtplib.SMTP('localhost')
   s.sendmail(me, family, msg.as_string())
   s.quit()

Here's an example of how to send the entire contents of a directory as
an email message: [1]

   #!/usr/bin/env python

   """Send the contents of a directory as a MIME message."""

   import os
   import sys
   import smtplib
   # For guessing MIME type based on file name extension
   import mimetypes

   from optparse import OptionParser

   from email import encoders
   from email.message import Message
   from email.mime.audio import MIMEAudio
   from email.mime.base import MIMEBase
   from email.mime.image import MIMEImage
   from email.mime.multipart import MIMEMultipart
   from email.mime.text import MIMEText

   COMMASPACE = ', '


   def main():
       parser = OptionParser(usage="""\
   Send the contents of a directory as a MIME message.

   Usage: %prog [options]

   Unless the -o option is given, the email is sent by forwarding to your local
   SMTP server, which then does the normal delivery process.  Your local machine
   must be running an SMTP server.
   """)
       parser.add_option('-d', '--directory',
                         type='string', action='store',
                         help="""Mail the contents of the specified directory,
                         otherwise use the current directory.  Only the regular
                         files in the directory are sent, and we don't recurse to
                         subdirectories.""")
       parser.add_option('-o', '--output',
                         type='string', action='store', metavar='FILE',
                         help="""Print the composed message to FILE instead of
                         sending the message to the SMTP server.""")
       parser.add_option('-s', '--sender',
                         type='string', action='store', metavar='SENDER',
                         help='The value of the From: header (required)')
       parser.add_option('-r', '--recipient',
                         type='string', action='append', metavar='RECIPIENT',
                         default=[], dest='recipients',
                         help='A To: header value (at least one required)')
       opts, args = parser.parse_args()
       if not opts.sender or not opts.recipients:
           parser.print_help()
           sys.exit(1)
       directory = opts.directory
       if not directory:
           directory = '.'
       # Create the enclosing (outer) message
       outer = MIMEMultipart()
       outer['Subject'] = 'Contents of directory %s' % os.path.abspath(directory)
       outer['To'] = COMMASPACE.join(opts.recipients)
       outer['From'] = opts.sender
       outer.preamble = 'You will not see this in a MIME-aware mail reader.\n'

       for filename in os.listdir(directory):
           path = os.path.join(directory, filename)
           if not os.path.isfile(path):
               continue
           # Guess the content type based on the file's extension.  Encoding
           # will be ignored, although we should check for simple things like
           # gzip'd or compressed files.
           ctype, encoding = mimetypes.guess_type(path)
           if ctype is None or encoding is not None:
               # No guess could be made, or the file is encoded (compressed), so
               # use a generic bag-of-bits type.
               ctype = 'application/octet-stream'
           maintype, subtype = ctype.split('/', 1)
           if maintype == 'text':
               fp = open(path)
               # Note: we should handle calculating the charset
               msg = MIMEText(fp.read(), _subtype=subtype)
               fp.close()
           elif maintype == 'image':
               fp = open(path, 'rb')
               msg = MIMEImage(fp.read(), _subtype=subtype)
               fp.close()
           elif maintype == 'audio':
               fp = open(path, 'rb')
               msg = MIMEAudio(fp.read(), _subtype=subtype)
               fp.close()
           else:
               fp = open(path, 'rb')
               msg = MIMEBase(maintype, subtype)
               msg.set_payload(fp.read())
               fp.close()
               # Encode the payload using Base64
               encoders.encode_base64(msg)
           # Set the filename parameter
           msg.add_header('Content-Disposition', 'attachment', filename=filename)
           outer.attach(msg)
       # Now send or store the message
       composed = outer.as_string()
       if opts.output:
           fp = open(opts.output, 'w')
           fp.write(composed)
           fp.close()
       else:
           s = smtplib.SMTP('localhost')
           s.sendmail(opts.sender, opts.recipients, composed)
           s.quit()


   if __name__ == '__main__':
       main()

Here's an example of how to unpack a MIME message like the one above,
into a directory of files:

   #!/usr/bin/env python

   """Unpack a MIME message into a directory of files."""

   import os
   import sys
   import email
   import errno
   import mimetypes

   from optparse import OptionParser


   def main():
       parser = OptionParser(usage="""\
   Unpack a MIME message into a directory of files.

   Usage: %prog [options] msgfile
   """)
       parser.add_option('-d', '--directory',
                         type='string', action='store',
                         help="""Unpack the MIME message into the named
                         directory, which will be created if it doesn't already
                         exist.""")
       opts, args = parser.parse_args()
       if not opts.directory:
           parser.print_help()
           sys.exit(1)

       try:
           msgfile = args[0]
       except IndexError:
           parser.print_help()
           sys.exit(1)

       try:
           os.mkdir(opts.directory)
       except OSError as e:
           # Ignore directory exists error
           if e.errno != errno.EEXIST:
               raise

       fp = open(msgfile)
       msg = email.message_from_file(fp)
       fp.close()

       counter = 1
       for part in msg.walk():
           # multipart/* are just containers
           if part.get_content_maintype() == 'multipart':
               continue
           # Applications should really sanitize the given filename so that an
           # email message can't be used to overwrite important files
           filename = part.get_filename()
           if not filename:
               ext = mimetypes.guess_extension(part.get_content_type())
               if not ext:
                   # Use a generic bag-of-bits extension
                   ext = '.bin'
               filename = 'part-%03d%s' % (counter, ext)
           counter += 1
           fp = open(os.path.join(opts.directory, filename), 'wb')
           fp.write(part.get_payload(decode=True))
           fp.close()


   if __name__ == '__main__':
       main()

Here's an example of how to create an HTML message with an alternative
plain text version: [2]

   #!/usr/bin/env python

   import smtplib

   from email.mime.multipart import MIMEMultipart
   from email.mime.text import MIMEText

   # me == my email address
   # you == recipient's email address
   me = "my@email.com"
   you = "your@email.com"

   # Create message container - the correct MIME type is multipart/alternative.
   msg = MIMEMultipart('alternative')
   msg['Subject'] = "Link"
   msg['From'] = me
   msg['To'] = you

   # Create the body of the message (a plain-text and an HTML version).
   text = "Hi!\nHow are you?\nHere is the link you wanted:\nhttps://www.python.org"
   html = """\
   <html>
     <head></head>
     <body>
       <p>Hi!<br>
          How are you?<br>
          Here is the <a href="https://www.python.org">link</a> you wanted.
       </p>
     </body>
   </html>
   """

   # Record the MIME types of both parts - text/plain and text/html.
   part1 = MIMEText(text, 'plain')
   part2 = MIMEText(html, 'html')

   # Attach parts into message container.
   # According to RFC 2046, the last part of a multipart message, in this case
   # the HTML message, is best and preferred.
   msg.attach(part1)
   msg.attach(part2)

   # Send the message via local SMTP server.
   s = smtplib.SMTP('localhost')
   # sendmail function takes 3 arguments: sender's address, recipient's address
   # and message to send - here it is sent as one string.
   s.sendmail(me, you, msg.as_string())
   s.quit()

-[ Footnotes ]-

[1] Thanks to Matthew Dixon Cowles for the original inspiration
    and examples.

[2] Contributed by Martin Matejek.
