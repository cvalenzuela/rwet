
Type Objects
************

PyTypeObject

   The C structure of the objects used to describe built-in types.

PyObject* PyType_Type

   This is the type object for type objects; it is the same object as
   "type" and "types.TypeType" in the Python layer.

int PyType_Check(PyObject *o)

   Return true if the object *o* is a type object, including instances
   of types derived from the standard type object.  Return false in
   all other cases.

int PyType_CheckExact(PyObject *o)

   Return true if the object *o* is a type object, but not a subtype
   of the standard type object.  Return false in all other cases.

   New in version 2.2.

unsigned int PyType_ClearCache()

   Clear the internal lookup cache. Return the current version tag.

   New in version 2.6.

void PyType_Modified(PyTypeObject *type)

   Invalidate the internal lookup cache for the type and all of its
   subtypes.  This function must be called after any manual
   modification of the attributes or base classes of the type.

   New in version 2.6.

int PyType_HasFeature(PyObject *o, int feature)

   Return true if the type object *o* sets the feature *feature*.
   Type features are denoted by single bit flags.

int PyType_IS_GC(PyObject *o)

   Return true if the type object includes support for the cycle
   detector; this tests the type flag "Py_TPFLAGS_HAVE_GC".

   New in version 2.0.

int PyType_IsSubtype(PyTypeObject *a, PyTypeObject *b)

   Return true if *a* is a subtype of *b*.

   New in version 2.2.

   This function only checks for actual subtypes, which means that
   "__subclasscheck__()" is not called on *b*.  Call
   "PyObject_IsSubclass()" to do the same check that "issubclass()"
   would do.

PyObject* PyType_GenericAlloc(PyTypeObject *type, Py_ssize_t nitems)
    *Return value: New reference.*

   New in version 2.2.

   Changed in version 2.5: This function used an "int" type for
   *nitems*. This might require changes in your code for properly
   supporting 64-bit systems.

PyObject* PyType_GenericNew(PyTypeObject *type, PyObject *args, PyObject *kwds)
    *Return value: New reference.*

   New in version 2.2.

int PyType_Ready(PyTypeObject *type)

   Finalize a type object.  This should be called on all type objects
   to finish their initialization.  This function is responsible for
   adding inherited slots from a type's base class.  Return "0" on
   success, or return "-1" and sets an exception on error.

   New in version 2.2.
