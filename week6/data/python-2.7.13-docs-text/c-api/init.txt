
Initialization, Finalization, and Threads
*****************************************


Initializing and finalizing the interpreter
===========================================

void Py_Initialize()

   Initialize the Python interpreter.  In an application embedding
   Python, this should be called before using any other Python/C API
   functions; with the exception of "Py_SetProgramName()",
   "Py_SetPythonHome()", "PyEval_InitThreads()",
   "PyEval_ReleaseLock()", and "PyEval_AcquireLock()". This
   initializes the table of loaded modules ("sys.modules"), and
   creates the fundamental modules "__builtin__", "__main__" and
   "sys".  It also initializes the module search path ("sys.path"). It
   does not set "sys.argv"; use "PySys_SetArgvEx()" for that.  This is
   a no-op when called for a second time (without calling
   "Py_Finalize()" first).  There is no return value; it is a fatal
   error if the initialization fails.

void Py_InitializeEx(int initsigs)

   This function works like "Py_Initialize()" if *initsigs* is "1". If
   *initsigs* is "0", it skips initialization registration of signal
   handlers, which might be useful when Python is embedded.

   New in version 2.4.

int Py_IsInitialized()

   Return true (nonzero) when the Python interpreter has been
   initialized, false (zero) if not.  After "Py_Finalize()" is called,
   this returns false until "Py_Initialize()" is called again.

void Py_Finalize()

   Undo all initializations made by "Py_Initialize()" and subsequent
   use of Python/C API functions, and destroy all sub-interpreters
   (see "Py_NewInterpreter()" below) that were created and not yet
   destroyed since the last call to "Py_Initialize()".  Ideally, this
   frees all memory allocated by the Python interpreter.  This is a
   no-op when called for a second time (without calling
   "Py_Initialize()" again first).  There is no return value; errors
   during finalization are ignored.

   This function is provided for a number of reasons.  An embedding
   application might want to restart Python without having to restart
   the application itself. An application that has loaded the Python
   interpreter from a dynamically loadable library (or DLL) might want
   to free all memory allocated by Python before unloading the DLL.
   During a hunt for memory leaks in an application a developer might
   want to free all memory allocated by Python before exiting from the
   application.

   **Bugs and caveats:** The destruction of modules and objects in
   modules is done in random order; this may cause destructors
   ("__del__()" methods) to fail when they depend on other objects
   (even functions) or modules.  Dynamically loaded extension modules
   loaded by Python are not unloaded.  Small amounts of memory
   allocated by the Python interpreter may not be freed (if you find a
   leak, please report it).  Memory tied up in circular references
   between objects is not freed.  Some memory allocated by extension
   modules may not be freed.  Some extensions may not work properly if
   their initialization routine is called more than once; this can
   happen if an application calls "Py_Initialize()" and
   "Py_Finalize()" more than once.


Process-wide parameters
=======================

void Py_SetProgramName(char *name)

   This function should be called before "Py_Initialize()" is called
   for the first time, if it is called at all.  It tells the
   interpreter the value of the "argv[0]" argument to the "main()"
   function of the program. This is used by "Py_GetPath()" and some
   other functions below to find the Python run-time libraries
   relative to the interpreter executable.  The default value is
   "'python'".  The argument should point to a zero-terminated
   character string in static storage whose contents will not change
   for the duration of the program's execution.  No code in the Python
   interpreter will change the contents of this storage.

char* Py_GetProgramName()

   Return the program name set with "Py_SetProgramName()", or the
   default. The returned string points into static storage; the caller
   should not modify its value.

char* Py_GetPrefix()

   Return the *prefix* for installed platform-independent files. This
   is derived through a number of complicated rules from the program
   name set with "Py_SetProgramName()" and some environment variables;
   for example, if the program name is "'/usr/local/bin/python'", the
   prefix is "'/usr/local'". The returned string points into static
   storage; the caller should not modify its value.  This corresponds
   to the **prefix** variable in the top-level "Makefile" and the "--
   prefix" argument to the **configure** script at build time.  The
   value is available to Python code as "sys.prefix". It is only
   useful on Unix.  See also the next function.

char* Py_GetExecPrefix()

   Return the *exec-prefix* for installed platform-*dependent* files.
   This is derived through a number of complicated rules from the
   program name set with "Py_SetProgramName()" and some environment
   variables; for example, if the program name is
   "'/usr/local/bin/python'", the exec-prefix is "'/usr/local'".  The
   returned string points into static storage; the caller should not
   modify its value.  This corresponds to the **exec_prefix** variable
   in the top-level "Makefile" and the "--exec-prefix" argument to the
   **configure** script at build  time.  The value is available to
   Python code as "sys.exec_prefix".  It is only useful on Unix.

   Background: The exec-prefix differs from the prefix when platform
   dependent files (such as executables and shared libraries) are
   installed in a different directory tree.  In a typical
   installation, platform dependent files may be installed in the
   "/usr/local/plat" subtree while platform independent may be
   installed in "/usr/local".

   Generally speaking, a platform is a combination of hardware and
   software families, e.g.  Sparc machines running the Solaris 2.x
   operating system are considered the same platform, but Intel
   machines running Solaris 2.x are another platform, and Intel
   machines running Linux are yet another platform.  Different major
   revisions of the same operating system generally also form
   different platforms.  Non-Unix operating systems are a different
   story; the installation strategies on those systems are so
   different that the prefix and exec-prefix are meaningless, and set
   to the empty string. Note that compiled Python bytecode files are
   platform independent (but not independent from the Python version
   by which they were compiled!).

   System administrators will know how to configure the **mount** or
   **automount** programs to share "/usr/local" between platforms
   while having "/usr/local/plat" be a different filesystem for each
   platform.

char* Py_GetProgramFullPath()

   Return the full program name of the Python executable; this is
   computed as a side-effect of deriving the default module search
   path  from the program name (set by "Py_SetProgramName()" above).
   The returned string points into static storage; the caller should
   not modify its value.  The value is available to Python code as
   "sys.executable".

char* Py_GetPath()

   Return the default module search path; this is computed from the
   program name (set by "Py_SetProgramName()" above) and some
   environment variables. The returned string consists of a series of
   directory names separated by a platform dependent delimiter
   character.  The delimiter character is "':'" on Unix and Mac OS X,
   "';'" on Windows.  The returned string points into static storage;
   the caller should not modify its value.  The list "sys.path" is
   initialized with this value on interpreter startup; it can be (and
   usually is) modified later to change the search path for loading
   modules.

const char* Py_GetVersion()

   Return the version of this Python interpreter.  This is a string
   that looks something like

      "1.5 (#67, Dec 31 1997, 22:34:28) [GCC 2.7.2.2]"

   The first word (up to the first space character) is the current
   Python version; the first three characters are the major and minor
   version separated by a period.  The returned string points into
   static storage; the caller should not modify its value.  The value
   is available to Python code as "sys.version".

const char* Py_GetPlatform()

   Return the platform identifier for the current platform.  On Unix,
   this is formed from the "official" name of the operating system,
   converted to lower case, followed by the major revision number;
   e.g., for Solaris 2.x, which is also known as SunOS 5.x, the value
   is "'sunos5'".  On Mac OS X, it is "'darwin'".  On Windows, it is
   "'win'".  The returned string points into static storage; the
   caller should not modify its value.  The value is available to
   Python code as "sys.platform".

const char* Py_GetCopyright()

   Return the official copyright string for the current Python
   version, for example

   "'Copyright 1991-1995 Stichting Mathematisch Centrum, Amsterdam'"

   The returned string points into static storage; the caller should
   not modify its value.  The value is available to Python code as
   "sys.copyright".

const char* Py_GetCompiler()

   Return an indication of the compiler used to build the current
   Python version, in square brackets, for example:

      "[GCC 2.7.2.2]"

   The returned string points into static storage; the caller should
   not modify its value.  The value is available to Python code as
   part of the variable "sys.version".

const char* Py_GetBuildInfo()

   Return information about the sequence number and build date and
   time  of the current Python interpreter instance, for example

      "#67, Aug  1 1997, 22:34:28"

   The returned string points into static storage; the caller should
   not modify its value.  The value is available to Python code as
   part of the variable "sys.version".

void PySys_SetArgvEx(int argc, char **argv, int updatepath)

   Set "sys.argv" based on *argc* and *argv*.  These parameters are
   similar to those passed to the program's "main()" function with the
   difference that the first entry should refer to the script file to
   be executed rather than the executable hosting the Python
   interpreter.  If there isn't a script that will be run, the first
   entry in *argv* can be an empty string.  If this function fails to
   initialize "sys.argv", a fatal condition is signalled using
   "Py_FatalError()".

   If *updatepath* is zero, this is all the function does.  If
   *updatepath* is non-zero, the function also modifies "sys.path"
   according to the following algorithm:

   * If the name of an existing script is passed in "argv[0]", the
     absolute path of the directory where the script is located is
     prepended to "sys.path".

   * Otherwise (that is, if *argc* is 0 or "argv[0]" doesn't point
     to an existing file name), an empty string is prepended to
     "sys.path", which is the same as prepending the current working
     directory (""."").

   Note: It is recommended that applications embedding the Python
     interpreter for purposes other than executing a single script
     pass "0" as *updatepath*, and update "sys.path" themselves if
     desired. See CVE-2008-5983.On versions before 2.6.6, you can
     achieve the same effect by manually popping the first "sys.path"
     element after having called "PySys_SetArgv()", for example using:

        PyRun_SimpleString("import sys; sys.path.pop(0)\n");

   New in version 2.6.6.

void PySys_SetArgv(int argc, char **argv)

   This function works like "PySys_SetArgvEx()" with *updatepath* set
   to "1".

void Py_SetPythonHome(char *home)

   Set the default "home" directory, that is, the location of the
   standard Python libraries.  See "PYTHONHOME" for the meaning of the
   argument string.

   The argument should point to a zero-terminated character string in
   static storage whose contents will not change for the duration of
   the program's execution.  No code in the Python interpreter will
   change the contents of this storage.

char* Py_GetPythonHome()

   Return the default "home", that is, the value set by a previous
   call to "Py_SetPythonHome()", or the value of the "PYTHONHOME"
   environment variable if it is set.


Thread State and the Global Interpreter Lock
============================================

The Python interpreter is not fully thread-safe.  In order to support
multi-threaded Python programs, there's a global lock, called the
*global interpreter lock* or *GIL*, that must be held by the current
thread before it can safely access Python objects. Without the lock,
even the simplest operations could cause problems in a multi-threaded
program: for example, when two threads simultaneously increment the
reference count of the same object, the reference count could end up
being incremented only once instead of twice.

Therefore, the rule exists that only the thread that has acquired the
*GIL* may operate on Python objects or call Python/C API functions. In
order to emulate concurrency of execution, the interpreter regularly
tries to switch threads (see "sys.setcheckinterval()").  The lock is
also released around potentially blocking I/O operations like reading
or writing a file, so that other Python threads can run in the
meantime.

The Python interpreter keeps some thread-specific bookkeeping
information inside a data structure called "PyThreadState".  There's
also one global variable pointing to the current "PyThreadState": it
can be retrieved using "PyThreadState_Get()".


Releasing the GIL from extension code
-------------------------------------

Most extension code manipulating the *GIL* has the following simple
structure:

   Save the thread state in a local variable.
   Release the global interpreter lock.
   ... Do some blocking I/O operation ...
   Reacquire the global interpreter lock.
   Restore the thread state from the local variable.

This is so common that a pair of macros exists to simplify it:

   Py_BEGIN_ALLOW_THREADS
   ... Do some blocking I/O operation ...
   Py_END_ALLOW_THREADS

The "Py_BEGIN_ALLOW_THREADS" macro opens a new block and declares a
hidden local variable; the "Py_END_ALLOW_THREADS" macro closes the
block.  These two macros are still available when Python is compiled
without thread support (they simply have an empty expansion).

When thread support is enabled, the block above expands to the
following code:

   PyThreadState *_save;

   _save = PyEval_SaveThread();
   ...Do some blocking I/O operation...
   PyEval_RestoreThread(_save);

Here is how these functions work: the global interpreter lock is used
to protect the pointer to the current thread state.  When releasing
the lock and saving the thread state, the current thread state pointer
must be retrieved before the lock is released (since another thread
could immediately acquire the lock and store its own thread state in
the global variable). Conversely, when acquiring the lock and
restoring the thread state, the lock must be acquired before storing
the thread state pointer.

Note: Calling system I/O functions is the most common use case for
  releasing the GIL, but it can also be useful before calling long-
  running computations which don't need access to Python objects, such
  as compression or cryptographic functions operating over memory
  buffers.  For example, the standard "zlib" and "hashlib" modules
  release the GIL when compressing or hashing data.


Non-Python created threads
--------------------------

When threads are created using the dedicated Python APIs (such as the
"threading" module), a thread state is automatically associated to
them and the code showed above is therefore correct.  However, when
threads are created from C (for example by a third-party library with
its own thread management), they don't hold the GIL, nor is there a
thread state structure for them.

If you need to call Python code from these threads (often this will be
part of a callback API provided by the aforementioned third-party
library), you must first register these threads with the interpreter
by creating a thread state data structure, then acquiring the GIL, and
finally storing their thread state pointer, before you can start using
the Python/C API.  When you are done, you should reset the thread
state pointer, release the GIL, and finally free the thread state data
structure.

The "PyGILState_Ensure()" and "PyGILState_Release()" functions do all
of the above automatically.  The typical idiom for calling into Python
from a C thread is:

   PyGILState_STATE gstate;
   gstate = PyGILState_Ensure();

   /* Perform Python actions here. */
   result = CallSomeFunction();
   /* evaluate result or handle exception */

   /* Release the thread. No Python API allowed beyond this point. */
   PyGILState_Release(gstate);

Note that the "PyGILState_*()" functions assume there is only one
global interpreter (created automatically by "Py_Initialize()").
Python supports the creation of additional interpreters (using
"Py_NewInterpreter()"), but mixing multiple interpreters and the
"PyGILState_*()" API is unsupported.

Another important thing to note about threads is their behaviour in
the face of the C "fork()" call. On most systems with "fork()", after
a process forks only the thread that issued the fork will exist. That
also means any locks held by other threads will never be released.
Python solves this for "os.fork()" by acquiring the locks it uses
internally before the fork, and releasing them afterwards. In
addition, it resets any Lock Objects in the child. When extending or
embedding Python, there is no way to inform Python of additional (non-
Python) locks that need to be acquired before or reset after a fork.
OS facilities such as "pthread_atfork()" would need to be used to
accomplish the same thing. Additionally, when extending or embedding
Python, calling "fork()" directly rather than through "os.fork()" (and
returning to or calling into Python) may result in a deadlock by one
of Python's internal locks being held by a thread that is defunct
after the fork. "PyOS_AfterFork()" tries to reset the necessary locks,
but is not always able to.


High-level API
--------------

These are the most commonly used types and functions when writing C
extension code, or when embedding the Python interpreter:

PyInterpreterState

   This data structure represents the state shared by a number of
   cooperating threads.  Threads belonging to the same interpreter
   share their module administration and a few other internal items.
   There are no public members in this structure.

   Threads belonging to different interpreters initially share
   nothing, except process state like available memory, open file
   descriptors and such.  The global interpreter lock is also shared
   by all threads, regardless of to which interpreter they belong.

PyThreadState

   This data structure represents the state of a single thread.  The
   only public data member is "PyInterpreterState *""interp", which
   points to this thread's interpreter state.

void PyEval_InitThreads()

   Initialize and acquire the global interpreter lock.  It should be
   called in the main thread before creating a second thread or
   engaging in any other thread operations such as
   "PyEval_ReleaseLock()" or "PyEval_ReleaseThread(tstate)". It is not
   needed before calling "PyEval_SaveThread()" or
   "PyEval_RestoreThread()".

   This is a no-op when called for a second time.  It is safe to call
   this function before calling "Py_Initialize()".

   Note: When only the main thread exists, no GIL operations are
     needed. This is a common situation (most Python programs do not
     use threads), and the lock operations slow the interpreter down a
     bit. Therefore, the lock is not created initially.  This
     situation is equivalent to having acquired the lock: when there
     is only a single thread, all object accesses are safe. Therefore,
     when this function initializes the global interpreter lock, it
     also acquires it.  Before the Python "_thread" module creates a
     new thread, knowing that either it has the lock or the lock
     hasn't been created yet, it calls "PyEval_InitThreads()". When
     this call returns, it is guaranteed that the lock has been
     created and that the calling thread has acquired it.It is **not**
     safe to call this function when it is unknown which thread (if
     any) currently has the global interpreter lock.This function is
     not available when thread support is disabled at compile time.

int PyEval_ThreadsInitialized()

   Returns a non-zero value if "PyEval_InitThreads()" has been called.
   This function can be called without holding the GIL, and therefore
   can be used to avoid calls to the locking API when running single-
   threaded.  This function is not available when thread support is
   disabled at compile time.

   New in version 2.4.

PyThreadState* PyEval_SaveThread()

   Release the global interpreter lock (if it has been created and
   thread support is enabled) and reset the thread state to *NULL*,
   returning the previous thread state (which is not *NULL*).  If the
   lock has been created, the current thread must have acquired it.
   (This function is available even when thread support is disabled at
   compile time.)

void PyEval_RestoreThread(PyThreadState *tstate)

   Acquire the global interpreter lock (if it has been created and
   thread support is enabled) and set the thread state to *tstate*,
   which must not be *NULL*.  If the lock has been created, the
   current thread must not have acquired it, otherwise deadlock
   ensues.  (This function is available even when thread support is
   disabled at compile time.)

PyThreadState* PyThreadState_Get()

   Return the current thread state.  The global interpreter lock must
   be held. When the current thread state is *NULL*, this issues a
   fatal error (so that the caller needn't check for *NULL*).

PyThreadState* PyThreadState_Swap(PyThreadState *tstate)

   Swap the current thread state with the thread state given by the
   argument *tstate*, which may be *NULL*.  The global interpreter
   lock must be held and is not released.

void PyEval_ReInitThreads()

   This function is called from "PyOS_AfterFork()" to ensure that
   newly created child processes don't hold locks referring to threads
   which are not running in the child process.

The following functions use thread-local storage, and are not
compatible with sub-interpreters:

PyGILState_STATE PyGILState_Ensure()

   Ensure that the current thread is ready to call the Python C API
   regardless of the current state of Python, or of the global
   interpreter lock. This may be called as many times as desired by a
   thread as long as each call is matched with a call to
   "PyGILState_Release()". In general, other thread-related APIs may
   be used between "PyGILState_Ensure()" and "PyGILState_Release()"
   calls as long as the thread state is restored to its previous state
   before the Release().  For example, normal usage of the
   "Py_BEGIN_ALLOW_THREADS" and "Py_END_ALLOW_THREADS" macros is
   acceptable.

   The return value is an opaque "handle" to the thread state when
   "PyGILState_Ensure()" was called, and must be passed to
   "PyGILState_Release()" to ensure Python is left in the same state.
   Even though recursive calls are allowed, these handles *cannot* be
   shared - each unique call to "PyGILState_Ensure()" must save the
   handle for its call to "PyGILState_Release()".

   When the function returns, the current thread will hold the GIL and
   be able to call arbitrary Python code.  Failure is a fatal error.

   New in version 2.3.

void PyGILState_Release(PyGILState_STATE)

   Release any resources previously acquired.  After this call,
   Python's state will be the same as it was prior to the
   corresponding "PyGILState_Ensure()" call (but generally this state
   will be unknown to the caller, hence the use of the GILState API).

   Every call to "PyGILState_Ensure()" must be matched by a call to
   "PyGILState_Release()" on the same thread.

   New in version 2.3.

PyThreadState* PyGILState_GetThisThreadState()

   Get the current thread state for this thread.  May return "NULL" if
   no GILState API has been used on the current thread.  Note that the
   main thread always has such a thread-state, even if no auto-thread-
   state call has been made on the main thread.  This is mainly a
   helper/diagnostic function.

   New in version 2.3.

The following macros are normally used without a trailing semicolon;
look for example usage in the Python source distribution.

Py_BEGIN_ALLOW_THREADS

   This macro expands to "{ PyThreadState *_save; _save =
   PyEval_SaveThread();". Note that it contains an opening brace; it
   must be matched with a following "Py_END_ALLOW_THREADS" macro.  See
   above for further discussion of this macro.  It is a no-op when
   thread support is disabled at compile time.

Py_END_ALLOW_THREADS

   This macro expands to "PyEval_RestoreThread(_save); }". Note that
   it contains a closing brace; it must be matched with an earlier
   "Py_BEGIN_ALLOW_THREADS" macro.  See above for further discussion
   of this macro.  It is a no-op when thread support is disabled at
   compile time.

Py_BLOCK_THREADS

   This macro expands to "PyEval_RestoreThread(_save);": it is
   equivalent to "Py_END_ALLOW_THREADS" without the closing brace.  It
   is a no-op when thread support is disabled at compile time.

Py_UNBLOCK_THREADS

   This macro expands to "_save = PyEval_SaveThread();": it is
   equivalent to "Py_BEGIN_ALLOW_THREADS" without the opening brace
   and variable declaration.  It is a no-op when thread support is
   disabled at compile time.


Low-level API
-------------

All of the following functions are only available when thread support
is enabled at compile time, and must be called only when the global
interpreter lock has been created.

PyInterpreterState* PyInterpreterState_New()

   Create a new interpreter state object.  The global interpreter lock
   need not be held, but may be held if it is necessary to serialize
   calls to this function.

void PyInterpreterState_Clear(PyInterpreterState *interp)

   Reset all information in an interpreter state object.  The global
   interpreter lock must be held.

void PyInterpreterState_Delete(PyInterpreterState *interp)

   Destroy an interpreter state object.  The global interpreter lock
   need not be held.  The interpreter state must have been reset with
   a previous call to "PyInterpreterState_Clear()".

PyThreadState* PyThreadState_New(PyInterpreterState *interp)

   Create a new thread state object belonging to the given interpreter
   object. The global interpreter lock need not be held, but may be
   held if it is necessary to serialize calls to this function.

void PyThreadState_Clear(PyThreadState *tstate)

   Reset all information in a thread state object.  The global
   interpreter lock must be held.

void PyThreadState_Delete(PyThreadState *tstate)

   Destroy a thread state object.  The global interpreter lock need
   not be held. The thread state must have been reset with a previous
   call to "PyThreadState_Clear()".

PyObject* PyThreadState_GetDict()
    *Return value: Borrowed reference.*

   Return a dictionary in which extensions can store thread-specific
   state information.  Each extension should use a unique key to use
   to store state in the dictionary.  It is okay to call this function
   when no current thread state is available. If this function returns
   *NULL*, no exception has been raised and the caller should assume
   no current thread state is available.

   Changed in version 2.3: Previously this could only be called when a
   current thread is active, and *NULL* meant that an exception was
   raised.

int PyThreadState_SetAsyncExc(long id, PyObject *exc)

   Asynchronously raise an exception in a thread. The *id* argument is
   the thread id of the target thread; *exc* is the exception object
   to be raised. This function does not steal any references to *exc*.
   To prevent naive misuse, you must write your own C extension to
   call this.  Must be called with the GIL held. Returns the number of
   thread states modified; this is normally one, but will be zero if
   the thread id isn't found.  If *exc* is "NULL", the pending
   exception (if any) for the thread is cleared. This raises no
   exceptions.

   New in version 2.3.

void PyEval_AcquireThread(PyThreadState *tstate)

   Acquire the global interpreter lock and set the current thread
   state to *tstate*, which should not be *NULL*.  The lock must have
   been created earlier. If this thread already has the lock, deadlock
   ensues.

   "PyEval_RestoreThread()" is a higher-level function which is always
   available (even when thread support isn't enabled or when threads
   have not been initialized).

void PyEval_ReleaseThread(PyThreadState *tstate)

   Reset the current thread state to *NULL* and release the global
   interpreter lock.  The lock must have been created earlier and must
   be held by the current thread.  The *tstate* argument, which must
   not be *NULL*, is only used to check that it represents the current
   thread state --- if it isn't, a fatal error is reported.

   "PyEval_SaveThread()" is a higher-level function which is always
   available (even when thread support isn't enabled or when threads
   have not been initialized).

void PyEval_AcquireLock()

   Acquire the global interpreter lock.  The lock must have been
   created earlier. If this thread already has the lock, a deadlock
   ensues.

   Warning: This function does not change the current thread state.
     Please use "PyEval_RestoreThread()" or "PyEval_AcquireThread()"
     instead.

void PyEval_ReleaseLock()

   Release the global interpreter lock.  The lock must have been
   created earlier.

   Warning: This function does not change the current thread state.
     Please use "PyEval_SaveThread()" or "PyEval_ReleaseThread()"
     instead.


Sub-interpreter support
=======================

While in most uses, you will only embed a single Python interpreter,
there are cases where you need to create several independent
interpreters in the same process and perhaps even in the same thread.
Sub-interpreters allow you to do that.  You can switch between sub-
interpreters using the "PyThreadState_Swap()" function.  You can
create and destroy them using the following functions:

PyThreadState* Py_NewInterpreter()

   Create a new sub-interpreter.  This is an (almost) totally separate
   environment for the execution of Python code.  In particular, the
   new interpreter has separate, independent versions of all imported
   modules, including the fundamental modules "builtins", "__main__"
   and "sys".  The table of loaded modules ("sys.modules") and the
   module search path ("sys.path") are also separate.  The new
   environment has no "sys.argv" variable.  It has new standard I/O
   stream file objects "sys.stdin", "sys.stdout" and "sys.stderr"
   (however these refer to the same underlying file descriptors).

   The return value points to the first thread state created in the
   new sub-interpreter.  This thread state is made in the current
   thread state. Note that no actual thread is created; see the
   discussion of thread states below.  If creation of the new
   interpreter is unsuccessful, *NULL* is returned; no exception is
   set since the exception state is stored in the current thread state
   and there may not be a current thread state.  (Like all other
   Python/C API functions, the global interpreter lock must be held
   before calling this function and is still held when it returns;
   however, unlike most other Python/C API functions, there needn't be
   a current thread state on entry.)

   Extension modules are shared between (sub-)interpreters as follows:
   the first time a particular extension is imported, it is
   initialized normally, and a (shallow) copy of its module's
   dictionary is squirreled away.  When the same extension is imported
   by another (sub-)interpreter, a new module is initialized and
   filled with the contents of this copy; the extension's "init"
   function is not called.  Note that this is different from what
   happens when an extension is imported after the interpreter has
   been completely re-initialized by calling "Py_Finalize()" and
   "Py_Initialize()"; in that case, the extension's "initmodule"
   function *is* called again.

void Py_EndInterpreter(PyThreadState *tstate)

   Destroy the (sub-)interpreter represented by the given thread
   state. The given thread state must be the current thread state.
   See the discussion of thread states below.  When the call returns,
   the current thread state is *NULL*.  All thread states associated
   with this interpreter are destroyed.  (The global interpreter lock
   must be held before calling this function and is still held when it
   returns.)  "Py_Finalize()" will destroy all sub-interpreters that
   haven't been explicitly destroyed at that point.


Bugs and caveats
----------------

Because sub-interpreters (and the main interpreter) are part of the
same process, the insulation between them isn't perfect --- for
example, using low-level file operations like  "os.close()" they can
(accidentally or maliciously) affect each other's open files.  Because
of the way extensions are shared between (sub-)interpreters, some
extensions may not work properly; this is especially likely when the
extension makes use of (static) global variables, or when the
extension manipulates its module's dictionary after its
initialization.  It is possible to insert objects created in one sub-
interpreter into a namespace of another sub-interpreter; this should
be done with great care to avoid sharing user-defined functions,
methods, instances or classes between sub-interpreters, since import
operations executed by such objects may affect the wrong
(sub-)interpreter's dictionary of loaded modules.

Also note that combining this functionality with "PyGILState_*()" APIs
is delicate, because these APIs assume a bijection between Python
thread states and OS-level threads, an assumption broken by the
presence of sub-interpreters. It is highly recommended that you don't
switch sub-interpreters between a pair of matching
"PyGILState_Ensure()" and "PyGILState_Release()" calls. Furthermore,
extensions (such as "ctypes") using these APIs to allow calling of
Python code from non-Python created threads will probably be broken
when using sub-interpreters.


Asynchronous Notifications
==========================

A mechanism is provided to make asynchronous notifications to the main
interpreter thread.  These notifications take the form of a function
pointer and a void pointer argument.

int Py_AddPendingCall(int (*func)(void *), void *arg)

   Schedule a function to be called from the main interpreter thread.
   On success, "0" is returned and *func* is queued for being called
   in the main thread.  On failure, "-1" is returned without setting
   any exception.

   When successfully queued, *func* will be *eventually* called from
   the main interpreter thread with the argument *arg*.  It will be
   called asynchronously with respect to normally running Python code,
   but with both these conditions met:

   * on a *bytecode* boundary;

   * with the main thread holding the *global interpreter lock*
     (*func* can therefore use the full C API).

   *func* must return "0" on success, or "-1" on failure with an
   exception set.  *func* won't be interrupted to perform another
   asynchronous notification recursively, but it can still be
   interrupted to switch threads if the global interpreter lock is
   released.

   This function doesn't need a current thread state to run, and it
   doesn't need the global interpreter lock.

   Warning: This is a low-level function, only useful for very
     special cases. There is no guarantee that *func* will be called
     as quick as possible.  If the main thread is busy executing a
     system call, *func* won't be called before the system call
     returns.  This function is generally **not** suitable for calling
     Python code from arbitrary C threads.  Instead, use the
     PyGILState API.

   New in version 2.7.


Profiling and Tracing
=====================

The Python interpreter provides some low-level support for attaching
profiling and execution tracing facilities.  These are used for
profiling, debugging, and coverage analysis tools.

Starting with Python 2.2, the implementation of this facility was
substantially revised, and an interface from C was added.  This C
interface allows the profiling or tracing code to avoid the overhead
of calling through Python-level callable objects, making a direct C
function call instead.  The essential attributes of the facility have
not changed; the interface allows trace functions to be installed per-
thread, and the basic events reported to the trace function are the
same as had been reported to the Python-level trace functions in
previous versions.

int (*Py_tracefunc)(PyObject *obj, PyFrameObject *frame, int what, PyObject *arg)

   The type of the trace function registered using
   "PyEval_SetProfile()" and "PyEval_SetTrace()". The first parameter
   is the object passed to the registration function as *obj*, *frame*
   is the frame object to which the event pertains, *what* is one of
   the constants "PyTrace_CALL", "PyTrace_EXCEPTION", "PyTrace_LINE",
   "PyTrace_RETURN", "PyTrace_C_CALL", "PyTrace_C_EXCEPTION", or
   "PyTrace_C_RETURN", and *arg* depends on the value of *what*:

   +--------------------------------+----------------------------------------+
   | Value of *what*                | Meaning of *arg*                       |
   +================================+========================================+
   | "PyTrace_CALL"                 | Always *NULL*.                         |
   +--------------------------------+----------------------------------------+
   | "PyTrace_EXCEPTION"            | Exception information as returned by   |
   |                                | "sys.exc_info()".                      |
   +--------------------------------+----------------------------------------+
   | "PyTrace_LINE"                 | Always *NULL*.                         |
   +--------------------------------+----------------------------------------+
   | "PyTrace_RETURN"               | Value being returned to the caller, or |
   |                                | *NULL* if caused by an exception.      |
   +--------------------------------+----------------------------------------+
   | "PyTrace_C_CALL"               | Function object being called.          |
   +--------------------------------+----------------------------------------+
   | "PyTrace_C_EXCEPTION"          | Function object being called.          |
   +--------------------------------+----------------------------------------+
   | "PyTrace_C_RETURN"             | Function object being called.          |
   +--------------------------------+----------------------------------------+

int PyTrace_CALL

   The value of the *what* parameter to a "Py_tracefunc" function when
   a new call to a function or method is being reported, or a new
   entry into a generator. Note that the creation of the iterator for
   a generator function is not reported as there is no control
   transfer to the Python bytecode in the corresponding frame.

int PyTrace_EXCEPTION

   The value of the *what* parameter to a "Py_tracefunc" function when
   an exception has been raised.  The callback function is called with
   this value for *what* when after any bytecode is processed after
   which the exception becomes set within the frame being executed.
   The effect of this is that as exception propagation causes the
   Python stack to unwind, the callback is called upon return to each
   frame as the exception propagates.  Only trace functions receives
   these events; they are not needed by the profiler.

int PyTrace_LINE

   The value passed as the *what* parameter to a trace function (but
   not a profiling function) when a line-number event is being
   reported.

int PyTrace_RETURN

   The value for the *what* parameter to "Py_tracefunc" functions when
   a call is returning without propagating an exception.

int PyTrace_C_CALL

   The value for the *what* parameter to "Py_tracefunc" functions when
   a C function is about to be called.

int PyTrace_C_EXCEPTION

   The value for the *what* parameter to "Py_tracefunc" functions when
   a C function has raised an exception.

int PyTrace_C_RETURN

   The value for the *what* parameter to "Py_tracefunc" functions when
   a C function has returned.

void PyEval_SetProfile(Py_tracefunc func, PyObject *obj)

   Set the profiler function to *func*.  The *obj* parameter is passed
   to the function as its first parameter, and may be any Python
   object, or *NULL*.  If the profile function needs to maintain
   state, using a different value for *obj* for each thread provides a
   convenient and thread-safe place to store it.  The profile function
   is called for all monitored events except the line-number events.

void PyEval_SetTrace(Py_tracefunc func, PyObject *obj)

   Set the tracing function to *func*.  This is similar to
   "PyEval_SetProfile()", except the tracing function does receive
   line-number events.

PyObject* PyEval_GetCallStats(PyObject *self)

   Return a tuple of function call counts.  There are constants
   defined for the positions within the tuple:

   +---------------------------------+---------+
   | Name                            | Value   |
   +=================================+=========+
   | "PCALL_ALL"                     | 0       |
   +---------------------------------+---------+
   | "PCALL_FUNCTION"                | 1       |
   +---------------------------------+---------+
   | "PCALL_FAST_FUNCTION"           | 2       |
   +---------------------------------+---------+
   | "PCALL_FASTER_FUNCTION"         | 3       |
   +---------------------------------+---------+
   | "PCALL_METHOD"                  | 4       |
   +---------------------------------+---------+
   | "PCALL_BOUND_METHOD"            | 5       |
   +---------------------------------+---------+
   | "PCALL_CFUNCTION"               | 6       |
   +---------------------------------+---------+
   | "PCALL_TYPE"                    | 7       |
   +---------------------------------+---------+
   | "PCALL_GENERATOR"               | 8       |
   +---------------------------------+---------+
   | "PCALL_OTHER"                   | 9       |
   +---------------------------------+---------+
   | "PCALL_POP"                     | 10      |
   +---------------------------------+---------+

   "PCALL_FAST_FUNCTION" means no argument tuple needs to be created.
   "PCALL_FASTER_FUNCTION" means that the fast-path frame setup code
   is used.

   If there is a method call where the call can be optimized by
   changing the argument tuple and calling the function directly, it
   gets recorded twice.

   This function is only present if Python is compiled with
   "CALL_PROFILE" defined.


Advanced Debugger Support
=========================

These functions are only intended to be used by advanced debugging
tools.

PyInterpreterState* PyInterpreterState_Head()

   Return the interpreter state object at the head of the list of all
   such objects.

   New in version 2.2.

PyInterpreterState* PyInterpreterState_Next(PyInterpreterState *interp)

   Return the next interpreter state object after *interp* from the
   list of all such objects.

   New in version 2.2.

PyThreadState * PyInterpreterState_ThreadHead(PyInterpreterState *interp)

   Return the pointer to the first "PyThreadState" object in the list
   of threads associated with the interpreter *interp*.

   New in version 2.2.

PyThreadState* PyThreadState_Next(PyThreadState *tstate)

   Return the next thread state object after *tstate* from the list of
   all such objects belonging to the same "PyInterpreterState" object.

   New in version 2.2.
